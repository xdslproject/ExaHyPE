#!/usr/bin/env python3.10
import ast, os, glob
from io import IOBase
from pathlib import Path
import argparse
import ast
from io import IOBase
from xdsl.ir import MLContext
from xdsl.dialects.builtin import ModuleOp
from exahype_to_standard import LowerExaHyPEToStandard
from for_to_parallel import ConvertForToParallel
from exahype import exahypeIR
from util.semantic_error import SemanticError
from typing import Callable, Dict, List
from xdsl.xdsl_opt_main import xDSLOptMain

class ExaHyPEOptMain(xDSLOptMain):

    def register_all_passes(self):
        super().register_all_passes()
        self.register_pass("exahype-to-standard", lambda: LowerExaHyPEToStandard)
        self.register_pass("for-to-parallel", lambda: ConvertForToParallel)

    def register_all_targets(self):
        super().register_all_targets()

    def setup_pipeline(self):
        super().setup_pipeline()

    def register_all_arguments(self, arg_parser: argparse.ArgumentParser):
        super().register_all_arguments(arg_parser)
        arg_parser.add_argument(
                "--output-module-files",
                default=False,
                action="store_true",
                help="Outputs the generated module files on a module by module basis",
            )

    def register_all_dialects(self):
        super().register_all_dialects()
        """Register all dialects that can be used."""
        self.ctx.load_dialect(exahypeIR)

    @staticmethod
    def get_passes_as_dict(
    ) -> Dict[str, Callable[[MLContext, ModuleOp], None]]:
        """Add all passes that can be called by psy-opt in a dictionary."""
        pass_dictionary = {}

        passes = PsyOptMain.passes_native

        for pass_function in passes:
            pass_dictionary[pass_function.__name__.replace(
                "_", "-")] = pass_function

        return pass_dictionary

    def get_passes_as_list(native=False, integrated=False) -> List[str]:
        """Add all passes that can be called by psy-opt in a dictionary."""

        pass_list = []

        passes = PsyOptMain.passes_native

        for pass_function in passes:
            pass_list.append(pass_function.__name__.replace("_", "-"))

        return pass_list

    def register_all_frontends(self):
        super().register_all_frontends()


def _output_modules_to_file_for_target(modules, target, exahype_main):
  exahype_main.args.target=target
  i=0
  # This will generate output for every sub module that is part of the
  # top level module
  for op in modules:
    if isinstance(op, ModuleOp):
      module_contents=exahype_main.output_resulting_program(op)
      f = open("generated/module_"+str(i)+"."+target, "w")
      f.write(module_contents)
      f.close()
      i+=1

def _empty_generate_dir():
  if not os.path.isdir("generated"):
      Path("generated").mkdir(parents=True, exist_ok=True)

  files = glob.glob('generated/*')
  for f in files:
    os.remove(f)

def __main__():
    exahype_main = ExaHyPEOptMain()
    
    try:
        # Because we want to handle the output as modules in separate files, we don't use 'exahype_main.run()'
        chunks, file_extension = exahype_main.prepare_input()
        assert len(chunks) == 1
        module = exahype_main.parse_chunk(chunks[0], file_extension) # This is the input module
        exahype_main.apply_passes(module)
        print(module)
        if exahype_main.args.output_module_files:
            _empty_generate_dir()
            _output_modules_to_file_for_target([module], exahype_main.args.target, exahype_main)

    except SyntaxError as e:
        print(e.get_message())
        exit(0)
    except SemanticError as e:
        print("Semantic error: %s" % str(e))
        exit(0)

if __name__ == "__main__":
    __main__()
